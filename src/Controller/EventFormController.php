<?php

namespace App\Controller;


use App\Entity\Event;
use App\Form\EventFormType;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
class EventFormController extends AbstractController
{
    /**
     * @Route("/admin/{action}/event/{eventID}", name="app_eventForm")
     */
    public function createEvent(Request $request, $action, $eventID = null){
        $entityManager = $this->getDoctrine()->getManager();
        if($action === 'edit'){
            $event = $entityManager->getRepository(Event::class)->find($eventID);
        }
        else{
            $event = new Event();
        }
        $form = $this->createForm(EventFormType::class, $event);
        $form->handleRequest($request);

        if($form->isSubmitted()) {
            /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
            $file = $form->get('photo')->getData();
            if ($file) {
                $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();

                try {
                    $file->move(
                        $this->getParameter('photo_directory'),
                        $fileName
                    );
                } catch (FileException $e) {
                    // ... handle exception if something happens during file upload
                }
                if(!isset($_SESSION))
                    session_start();
                $_SESSION['eventPhoto'] = $fileName;
            }
            if($form->isValid()) {
                if (isset($_SESSION))
                    $event->setPhoto($_SESSION['eventPhoto']);

                if($request->request->get('eventPhoto'))
                    $event->setPhoto($request->request->get('eventPhoto'));

                if($request->request->get('deleteCheckBox') && $event->getPhoto()){
                    $fileSystem = new Filesystem();
                    $fileSystem->remove($this->getParameter('photo_directory').'/'.$event->getPhoto());
                    $event->setPhoto(null);
                }
                $entityManager->persist($event);
                $entityManager->flush();
                return $this->redirectToRoute(($action === 'create') ? 'index' : 'app_eventDetails', array('eventID' => $eventID));
            }
        }

        return $this->render('events/event_form.html.twig', [
            'eventForm' => $form->createView(),
            'isNew' => ($action === 'create') ? true : false,
            'photo' => $event->getPhoto()
        ]);

    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
